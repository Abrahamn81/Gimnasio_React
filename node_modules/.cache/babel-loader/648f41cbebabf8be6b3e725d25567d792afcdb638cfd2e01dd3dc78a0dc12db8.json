{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\nexport const useExercises = category => {\n  _s();\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const loadExercises = async category => {\n      try {\n        setLoading(true);\n        const data = await getAllExercisesService();\n        setExercises(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = id => {\n    setExercises(exercises.filter(exercise => exercise.id !== id));\n  };\n  return {\n    exercises,\n    loading,\n    error,\n    removeExercise\n  };\n};\n_s(useExercises, \"sNrHV5J3Y1hlm/Gw6eJuD54qlng=\");","map":{"version":3,"names":["useEffect","useState","getAllExercisesService","useExercises","category","_s","exercises","setExercises","loading","setLoading","error","setError","loadExercises","data","message","removeExercise","id","filter","exercise"],"sources":["/home/hack/Documents/ProyectoFinal/proyecto_react_mio/src/hooks/useExercises.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\n\nexport const useExercises = (category) => {\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const loadExercises = async (category) => {\n      try {\n        setLoading(true);\n\n        const data = await getAllExercisesService();\n        setExercises(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = (id) => {\n    setExercises(exercises.filter((exercise) => exercise.id !== id));\n  };\n\n  return { exercises, loading, error, removeExercise };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,sBAAsB,QAAQ,aAAa;AAEpD,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAOR,QAAQ,IAAK;MACxC,IAAI;QACFK,UAAU,CAAC,IAAI,CAAC;QAEhB,MAAMI,IAAI,GAAG,MAAMX,sBAAsB,EAAE;QAC3CK,YAAY,CAACM,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;MACzB,CAAC,SAAS;QACRL,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDG,aAAa,EAAE;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE;EACA,MAAMG,cAAc,GAAIC,EAAE,IAAK;IAC7BT,YAAY,CAACD,SAAS,CAACW,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAClE,CAAC;EAED,OAAO;IAAEV,SAAS;IAAEE,OAAO;IAAEE,KAAK;IAAEK;EAAe,CAAC;AACtD,CAAC;AAACV,EAAA,CA/BWF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}