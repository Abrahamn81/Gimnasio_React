{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\nimport { AuthContext } from \"../context/AuthContext\";\nexport const useExercises = () => {\n  _s();\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const {\n    token\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const loadExercises = async category => {\n      try {\n        setLoading(true);\n        const data = await getAllExercisesService({\n          category,\n          token\n        });\n        setExercises(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadExercises(category);\n  }, [category, token]);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = id => {\n    setExercises(exercises.filter(exercise => exercise.id !== id));\n  };\n  //actualizamos el estado del like de un ejercicio dentro de un listado\n  const updateLikeExercise = id => {\n    const updatedExercises = exercises.map(exercise => exercise.id === id ? {\n      ...exercise,\n      likes: exercise.likes + 1\n    } : exercise);\n    setExercises(updatedExercises);\n  };\n  return {\n    exercises,\n    loading,\n    error,\n    removeExercise,\n    updateLikeExercise,\n    setCategory,\n    category\n  };\n};\n_s(useExercises, \"vPeBJ/7IznVx3M9FE7+MYE6aaXw=\");","map":{"version":3,"names":["useContext","useEffect","useState","getAllExercisesService","AuthContext","useExercises","_s","exercises","setExercises","loading","setLoading","error","setError","category","setCategory","token","loadExercises","data","message","removeExercise","id","filter","exercise","updateLikeExercise","updatedExercises","map","likes"],"sources":["/home/hack/Documents/ProyectoFinal/proyecto_react_mio/src/hooks/useExercises.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nexport const useExercises = () => {\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const { token } = useContext(AuthContext);\n  useEffect(() => {\n    const loadExercises = async (category) => {\n      try {\n        setLoading(true);\n\n        const data = await getAllExercisesService({ category, token });\n        setExercises(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadExercises(category);\n  }, [category, token]);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = (id) => {\n    setExercises(exercises.filter((exercise) => exercise.id !== id));\n  };\n  //actualizamos el estado del like de un ejercicio dentro de un listado\n  const updateLikeExercise = (id) => {\n    const updatedExercises = exercises.map((exercise) =>\n      exercise.id === id ? { ...exercise, likes: exercise.likes + 1 } : exercise\n    );\n    setExercises(updatedExercises);\n  };\n\n  return {\n    exercises,\n    loading,\n    error,\n    removeExercise,\n    updateLikeExercise,\n    setCategory,\n    category,\n  };\n};\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,sBAAsB,QAAQ,aAAa;AACpD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IAAEa;EAAM,CAAC,GAAGf,UAAU,CAACI,WAAW,CAAC;EACzCH,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAOH,QAAQ,IAAK;MACxC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAEhB,MAAMO,IAAI,GAAG,MAAMd,sBAAsB,CAAC;UAAEU,QAAQ;UAAEE;QAAM,CAAC,CAAC;QAC9DP,YAAY,CAACS,IAAI,CAAC;MACpB,CAAC,CAAC,OAAON,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACO,OAAO,CAAC;MACzB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDM,aAAa,CAACH,QAAQ,CAAC;EACzB,CAAC,EAAE,CAACA,QAAQ,EAAEE,KAAK,CAAC,CAAC;;EAErB;AACF;AACA;AACA;EACE;EACA,MAAMI,cAAc,GAAIC,EAAE,IAAK;IAC7BZ,YAAY,CAACD,SAAS,CAACc,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAClE,CAAC;EACD;EACA,MAAMG,kBAAkB,GAAIH,EAAE,IAAK;IACjC,MAAMI,gBAAgB,GAAGjB,SAAS,CAACkB,GAAG,CAAEH,QAAQ,IAC9CA,QAAQ,CAACF,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGE,QAAQ;MAAEI,KAAK,EAAEJ,QAAQ,CAACI,KAAK,GAAG;IAAE,CAAC,GAAGJ,QAAQ,CAC3E;IACDd,YAAY,CAACgB,gBAAgB,CAAC;EAChC,CAAC;EAED,OAAO;IACLjB,SAAS;IACTE,OAAO;IACPE,KAAK;IACLQ,cAAc;IACdI,kBAAkB;IAClBT,WAAW;IACXD;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAhDWD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}