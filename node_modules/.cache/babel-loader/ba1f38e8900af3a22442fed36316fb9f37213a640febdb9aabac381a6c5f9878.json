{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\nexport const useExercises = category => {\n  _s();\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const loadExercises = async category => {\n    try {\n      setLoading(true);\n      const data = await getAllExercisesService(category);\n      setExercises(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = id => {\n    setExercises(exercises.filter(exercise => exercise.id !== id));\n  };\n  //\n  const updateLikeExercise = id => {\n    /* let index = exercises.findIndex((c) => c.id === id);\n    console.log(index, \"index\");\n    console.log(exercises[index].likes);\n    exercises[index].likes = exercises[index].likes + 1;\n    console.log(exercises[index].likes);\n    console.log(exercises);*/\n\n    const newTodos = exercises.map(todo => todo.id === id ? {\n      ...todo,\n      likes: todo.likes + 1\n    } : todo);\n    setExercises(newTodos);\n  };\n  const filterExercises = async category => {\n    await loadExercises(category);\n  };\n  return {\n    exercises,\n    loading,\n    error,\n    removeExercise,\n    updateLikeExercise,\n    filterExercises\n  };\n};\n_s(useExercises, \"sNrHV5J3Y1hlm/Gw6eJuD54qlng=\");","map":{"version":3,"names":["useEffect","useState","getAllExercisesService","useExercises","category","_s","exercises","setExercises","loading","setLoading","error","setError","loadExercises","data","message","removeExercise","id","filter","exercise","updateLikeExercise","newTodos","map","todo","likes","filterExercises"],"sources":["/home/hack/Documents/ProyectoFinal/proyecto_react_mio/src/hooks/useExercises.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\n\nexport const useExercises = (category) => {\n  const [exercises, setExercises] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const loadExercises = async (category) => {\n    try {\n      setLoading(true);\n\n      const data = await getAllExercisesService(category);\n      setExercises(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = (id) => {\n    setExercises(exercises.filter((exercise) => exercise.id !== id));\n  };\n  //\n  const updateLikeExercise = (id) => {\n    /* let index = exercises.findIndex((c) => c.id === id);\n    console.log(index, \"index\");\n    console.log(exercises[index].likes);\n    exercises[index].likes = exercises[index].likes + 1;\n    console.log(exercises[index].likes);\n    console.log(exercises);*/\n\n    const newTodos = exercises.map((todo) =>\n      todo.id === id ? { ...todo, likes: todo.likes + 1 } : todo\n    );\n\n    setExercises(newTodos);\n  };\n\n  const filterExercises = async (category) => {\n    await loadExercises(category);\n  };\n\n  return {\n    exercises,\n    loading,\n    error,\n    removeExercise,\n    updateLikeExercise,\n    filterExercises,\n  };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,sBAAsB,QAAQ,aAAa;AAEpD,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,aAAa,GAAG,MAAOR,QAAQ,IAAK;IACxC,IAAI;MACFK,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMI,IAAI,GAAG,MAAMX,sBAAsB,CAACE,QAAQ,CAAC;MACnDG,YAAY,CAACM,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;IACzB,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdY,aAAa,EAAE;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE;EACA,MAAMG,cAAc,GAAIC,EAAE,IAAK;IAC7BT,YAAY,CAACD,SAAS,CAACW,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAClE,CAAC;EACD;EACA,MAAMG,kBAAkB,GAAIH,EAAE,IAAK;IACjC;AACJ;AACA;AACA;AACA;AACA;;IAEI,MAAMI,QAAQ,GAAGd,SAAS,CAACe,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACN,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGM,IAAI;MAAEC,KAAK,EAAED,IAAI,CAACC,KAAK,GAAG;IAAE,CAAC,GAAGD,IAAI,CAC3D;IAEDf,YAAY,CAACa,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMI,eAAe,GAAG,MAAOpB,QAAQ,IAAK;IAC1C,MAAMQ,aAAa,CAACR,QAAQ,CAAC;EAC/B,CAAC;EAED,OAAO;IACLE,SAAS;IACTE,OAAO;IACPE,KAAK;IACLK,cAAc;IACdI,kBAAkB;IAClBK;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CA1DWF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}