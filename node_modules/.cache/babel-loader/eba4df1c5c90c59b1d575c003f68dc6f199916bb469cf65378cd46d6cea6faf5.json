{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\nexport const useExercises = category => {\n  _s();\n  const [exercises, setExercises] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const loadExercises = async category => {\n    try {\n      setLoading(true);\n      const data = await getAllExercisesService(category);\n      setExercises(data);\n      if (category === undefined) {\n        let categoriesNames = data.map(e => e.category);\n        categoriesNames = categoriesNames.filter((c, index) => categoriesNames.findIndex(c2 => c2 === c) === index);\n        console.log(\"cat\", categoriesNames);\n        setCategories(categoriesNames);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = id => {\n    setExercises(exercises.filter(exercise => exercise.id !== id));\n    setCategories(exercises.filter(exercise => exercise.id !== id).map(e => e.category));\n  };\n  const filterExercises = category => {\n    loadExercises(category);\n  };\n  return {\n    exercises,\n    categories,\n    loading,\n    error,\n    removeExercise,\n    filterExercises\n  };\n};\n_s(useExercises, \"mq1X7jvAHFgsdEBZWgsQ0uIie1Q=\");","map":{"version":3,"names":["useEffect","useState","getAllExercisesService","useExercises","category","_s","exercises","setExercises","categories","setCategories","loading","setLoading","error","setError","loadExercises","data","undefined","categoriesNames","map","e","filter","c","index","findIndex","c2","console","log","message","removeExercise","id","exercise","filterExercises"],"sources":["/home/hack/Documents/ProyectoFinal/proyecto_react_mio/src/hooks/useExercises.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getAllExercisesService } from \"../services\";\n\nexport const useExercises = (category) => {\n  const [exercises, setExercises] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const loadExercises = async (category) => {\n    try {\n      setLoading(true);\n\n      const data = await getAllExercisesService(category);\n      setExercises(data);\n      if (category === undefined) {\n        let categoriesNames = data.map((e) => e.category);\n        categoriesNames = categoriesNames.filter(\n          (c, index) => categoriesNames.findIndex((c2) => c2 === c) === index\n        );\n        console.log(\"cat\", categoriesNames);\n        setCategories(categoriesNames);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadExercises();\n  }, []);\n\n  /*   //añadimos el ejercicio nuevo a la lista de ejercicios\n  const addExercise = (exercise) => {\n    setExercises([...exercises, exercise]);\n  }; */\n  //actualizamos el estado con los todos los ejercicios con id diferente a la del ejercicio borrado\n  const removeExercise = (id) => {\n    setExercises(exercises.filter((exercise) => exercise.id !== id));\n    setCategories(\n      exercises.filter((exercise) => exercise.id !== id).map((e) => e.category)\n    );\n  };\n\n  const filterExercises = (category) => {\n    loadExercises(category);\n  };\n\n  return {\n    exercises,\n    categories,\n    loading,\n    error,\n    removeExercise,\n    filterExercises,\n  };\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,sBAAsB,QAAQ,aAAa;AAEpD,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,aAAa,GAAG,MAAOV,QAAQ,IAAK;IACxC,IAAI;MACFO,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMI,IAAI,GAAG,MAAMb,sBAAsB,CAACE,QAAQ,CAAC;MACnDG,YAAY,CAACQ,IAAI,CAAC;MAClB,IAAIX,QAAQ,KAAKY,SAAS,EAAE;QAC1B,IAAIC,eAAe,GAAGF,IAAI,CAACG,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACf,QAAQ,CAAC;QACjDa,eAAe,GAAGA,eAAe,CAACG,MAAM,CACtC,CAACC,CAAC,EAAEC,KAAK,KAAKL,eAAe,CAACM,SAAS,CAAEC,EAAE,IAAKA,EAAE,KAAKH,CAAC,CAAC,KAAKC,KAAK,CACpE;QACDG,OAAO,CAACC,GAAG,CAAC,KAAK,EAAET,eAAe,CAAC;QACnCR,aAAa,CAACQ,eAAe,CAAC;MAChC;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACe,OAAO,CAAC;IACzB,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdc,aAAa,EAAE;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE;EACA,MAAMc,cAAc,GAAIC,EAAE,IAAK;IAC7BtB,YAAY,CAACD,SAAS,CAACc,MAAM,CAAEU,QAAQ,IAAKA,QAAQ,CAACD,EAAE,KAAKA,EAAE,CAAC,CAAC;IAChEpB,aAAa,CACXH,SAAS,CAACc,MAAM,CAAEU,QAAQ,IAAKA,QAAQ,CAACD,EAAE,KAAKA,EAAE,CAAC,CAACX,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACf,QAAQ,CAAC,CAC1E;EACH,CAAC;EAED,MAAM2B,eAAe,GAAI3B,QAAQ,IAAK;IACpCU,aAAa,CAACV,QAAQ,CAAC;EACzB,CAAC;EAED,OAAO;IACLE,SAAS;IACTE,UAAU;IACVE,OAAO;IACPE,KAAK;IACLgB,cAAc;IACdG;EACF,CAAC;AACH,CAAC;AAAC1B,EAAA,CAvDWF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}